openapi: 3.0.0
info:
  title: RPP Testbed
  version: 0.0.1-dev
  contact:
    name: RPP WG
    email: rpp@ietf.org
  description: RPP Testbed server
tags:
  - name: Discovery
  - name: Domains
  - name: Contacts
  - name: Hosts
  - name: Poll messages
paths:
  /contacts:
    post:
      operationId: contacts_Create
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
        - name: expect
          in: header
          required: false
          schema:
            type: string
            enum:
              - 100-continue
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact.Contact'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '409':
          description: The request conflicts with the current state of the server.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse409'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Contacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact.ContactCreate'
      security:
        - BasicAuth: []
  /contacts/{id}:
    get:
      operationId: contacts_Get
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact.Contact'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '404':
          description: The server cannot find the requested resource.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse404'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Contacts
      security:
        - BasicAuth: []
    delete:
      operationId: contacts_Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact.Contact'
      tags:
        - Contacts
      security:
        - BasicAuth: []
  /domains:
    post:
      operationId: domains_Create
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
        - name: expect
          in: header
          required: false
          schema:
            type: string
            enum:
              - 100-continue
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.Domain'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '409':
          description: The request conflicts with the current state of the server.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse409'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain.DomainCreate'
      security:
        - BasicAuth: []
  /domains/{id}:
    get:
      operationId: domains_Get
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.Domain'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '404':
          description: The server cannot find the requested resource.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse404'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Domains
      security:
        - BasicAuth: []
    delete:
      operationId: domains_Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.Domain'
      tags:
        - Domains
      security:
        - BasicAuth: []
  /domains/{id}/processes/renewal:
    put:
      operationId: domains_RenewalRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.DomainRenewal'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain.DomainRenewal'
      security:
        - BasicAuth: []
  /domains/{id}/processes/transfer:
    put:
      operationId: domains_TransferRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.DomainTransfer'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain.DomainTransfer'
      security:
        - BasicAuth: []
    get:
      operationId: domains_TransferQuery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.DomainTransfer'
      tags:
        - Domains
      security:
        - BasicAuth: []
    delete:
      operationId: domains_TransferCancel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.DomainTransfer'
      tags:
        - Domains
      security:
        - BasicAuth: []
  /domains/{id}/processes/transfer/approval:
    put:
      operationId: domains_TransferApprove
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.DomainTransfer'
      tags:
        - Domains
      security:
        - BasicAuth: []
  /domains/{id}/processes/transfer/rejection:
    put:
      operationId: domains_TransferReject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain.DomainTransfer'
      tags:
        - Domains
      security:
        - BasicAuth: []
  /hello:
    get:
      operationId: Hello
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Discovery
  /hosts:
    post:
      operationId: hosts_Create
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
        - name: expect
          in: header
          required: false
          schema:
            type: string
            enum:
              - 100-continue
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/host.Host'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '409':
          description: The request conflicts with the current state of the server.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse409'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Hosts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/host.HostCreate'
      security:
        - BasicAuth: []
  /hosts/{id}:
    get:
      operationId: hosts_Get
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/host.Host'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '404':
          description: The server cannot find the requested resource.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse404'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Hosts
      security:
        - BasicAuth: []
  /messages:
    get:
      operationId: Messages_PollRequest
      parameters:
        - $ref: '#/components/parameters/headers.RequestHeaders'
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
            rpp-msgq-cnt:
              required: true
              schema:
                type: string
            rpp-msgq-date:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message.PollQueueMessage'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '409':
          description: The request conflicts with the current state of the server.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse409'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Poll messages
      security:
        - BasicAuth: []
  /messages/{id}:
    delete:
      operationId: Messages_AckPoll
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/headers.RequestHeaders'
      responses:
        '200':
          description: The request has succeeded.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
            rpp-msgq-cnt:
              required: true
              schema:
                type: string
            rpp-msgq-date:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message.PollMessageAckResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse400'
        '401':
          description: Access is unauthorized.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse401'
        '404':
          description: The server cannot find the requested resource.
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse404'
        '500':
          description: Server error
          headers:
            rpp-cltrid:
              required: false
              schema:
                type: string
            rpp-svtrid:
              required: false
              schema:
                type: string
            rpp-code:
              required: true
              schema:
                type: string
            rpp-code-text:
              required: true
              schema:
                type: string
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/errors.ErrorResponse500'
      tags:
        - Poll messages
      security:
        - BasicAuth: []
components:
  parameters:
    headers.RequestHeaders:
      name: rpp-cltrid
      in: header
      required: false
      schema:
        type: string
  schemas:
    HelloResponse:
      type: object
      required:
        - svID
        - svDate
        - svcMenu
        - dcp
      properties:
        svID:
          type: string
        svDate:
          type: string
        svcMenu:
          type: object
          properties:
            version:
              type: string
            lang:
              type: array
              items:
                type: string
          required:
            - version
            - lang
        dcp:
          type: object
          properties:
            access:
              type: object
              properties:
                all:
                  type: string
              required:
                - all
            statement:
              type: object
              properties:
                purpose:
                  type: object
                  properties:
                    admin:
                      type: string
                    prov:
                      type: string
                  required:
                    - admin
                    - prov
                recipient:
                  type: object
                  properties:
                    ours:
                      type: string
                    public:
                      type: string
                  required:
                    - ours
                    - public
                retention:
                  type: object
                  properties:
                    stated:
                      type: string
                  required:
                    - stated
              required:
                - purpose
                - recipient
                - retention
          required:
            - access
            - statement
    common.ProvisioningObj:
      type: object
      required:
        - authInfo
      properties:
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
        status:
          type: array
          items:
            type: string
        crDate:
          type: string
        exDate:
          type: string
        upDate:
          type: string
        trDate:
          type: string
        clID:
          type: string
        crID:
          type: string
    contact.Contact:
      type: object
      required:
        - id
        - contact_type
        - authInfo
      properties:
        id:
          type: string
        name:
          type: string
        organisation_name:
          type: string
        contact_type:
          $ref: '#/components/schemas/contact.ContactType'
        email:
          type: array
          items:
            type: string
        phone:
          type: array
          items:
            type: string
        fax:
          type: array
          items:
            type: string
        address:
          type: object
          properties:
            street:
              type: array
              items:
                type: string
            city:
              type: string
            stateProvince:
              type: string
            postalCode:
              type: string
            country:
              type: string
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
        status:
          type: array
          items:
            type: string
        crDate:
          type: string
        exDate:
          type: string
        upDate:
          type: string
        trDate:
          type: string
        clID:
          type: string
        crID:
          type: string
    contact.ContactCreate:
      type: object
      required:
        - id
        - contact_type
        - authInfo
      properties:
        id:
          type: string
        name:
          type: string
        organisation_name:
          type: string
        contact_type:
          $ref: '#/components/schemas/contact.ContactType'
        email:
          type: array
          items:
            type: string
        phone:
          type: array
          items:
            type: string
        fax:
          type: array
          items:
            type: string
        address:
          type: object
          properties:
            street:
              type: array
              items:
                type: string
            city:
              type: string
            stateProvince:
              type: string
            postalCode:
              type: string
            country:
              type: string
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
    contact.ContactDeletion:
      type: object
    contact.ContactType:
      type: string
      enum:
        - PERSON
        - ORG
    domain.ContactReference:
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: string
        type:
          type: array
          items:
            $ref: '#/components/schemas/domain.ContactType'
    domain.ContactType:
      type: string
      enum:
        - registrant
        - admin
        - tech
        - billing
    domain.DnsSec:
      type: object
      required:
        - keyTag
        - algorithm
        - digestType
        - digest
      properties:
        keyTag:
          type: string
        algorithm:
          type: string
        digestType:
          type: string
        digest:
          type: string
    domain.Domain:
      type: object
      required:
        - name
        - authInfo
      properties:
        name:
          type: string
        processes:
          type: object
          properties:
            creation:
              $ref: '#/components/schemas/domain.DomainCreation'
            renewal:
              $ref: '#/components/schemas/domain.DomainRenewal'
            transfer:
              $ref: '#/components/schemas/domain.DomainTransfer'
        ns:
          $ref: '#/components/schemas/domain.NS'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/domain.ContactReference'
        dnsSEC:
          type: array
          items:
            $ref: '#/components/schemas/domain.DnsSec'
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
        status:
          type: array
          items:
            type: string
        crDate:
          type: string
        exDate:
          type: string
        upDate:
          type: string
        trDate:
          type: string
        clID:
          type: string
        crID:
          type: string
      example:
        name: example.com
        processes:
          creation:
            period: P2Y
        authInfo:
          pw: password
        contacts:
          - value: registrant-id
            type:
              - registrant
    domain.DomainCreate:
      type: object
      required:
        - name
        - authInfo
      properties:
        name:
          type: string
        processes:
          type: object
          properties:
            creation:
              $ref: '#/components/schemas/domain.DomainCreation'
            renewal:
              $ref: '#/components/schemas/domain.DomainRenewal'
            transfer:
              $ref: '#/components/schemas/domain.DomainTransfer'
        ns:
          $ref: '#/components/schemas/domain.NS'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/domain.ContactReference'
        dnsSEC:
          type: array
          items:
            $ref: '#/components/schemas/domain.DnsSec'
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
      example:
        name: example.com
        processes:
          creation:
            period: P2Y
        authInfo:
          pw: password
        contacts:
          - value: registrant-id
            type:
              - registrant
    domain.DomainCreation:
      type: object
      properties:
        period:
          type: string
          format: duration
    domain.DomainDeletion:
      type: object
      properties:
        purgeDate:
          type: string
          format: date-time
    domain.DomainRenewal:
      type: object
      properties:
        period:
          type: string
          format: duration
    domain.DomainTransfer:
      type: object
      properties:
        period:
          type: string
          format: duration
    domain.NS:
      oneOf:
        - $ref: '#/components/schemas/host.NSHostObj'
        - $ref: '#/components/schemas/domain.NSHostAttr'
    domain.NSHostAttr:
      type: object
      required:
        - hostAttr
      properties:
        hostAttr:
          type: array
          items:
            $ref: '#/components/schemas/host.HostInfoAttr'
    domain.foo:
      type: object
      properties:
        bar:
          type: string
    errors.ErrorResponse:
      type: object
      required:
        - title
        - detail
        - type
        - status
        - instance
      properties:
        title:
          type: string
        detail:
          type: string
        type:
          type: string
        status:
          type: string
        instance:
          type: string
    errors.ErrorResponse400:
      type: object
      allOf:
        - $ref: '#/components/schemas/errors.ErrorResponse'
    errors.ErrorResponse401:
      type: object
      allOf:
        - $ref: '#/components/schemas/errors.ErrorResponse'
    errors.ErrorResponse404:
      type: object
      allOf:
        - $ref: '#/components/schemas/errors.ErrorResponse'
    errors.ErrorResponse409:
      type: object
      allOf:
        - $ref: '#/components/schemas/errors.ErrorResponse'
    errors.ErrorResponse500:
      type: object
      allOf:
        - $ref: '#/components/schemas/errors.ErrorResponse'
    headers.ResponseHeaders:
      type: object
    host.Host:
      type: object
      required:
        - authInfo
      properties:
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
        status:
          type: array
          items:
            type: string
        crDate:
          type: string
        exDate:
          type: string
        upDate:
          type: string
        trDate:
          type: string
        clID:
          type: string
        crID:
          type: string
      allOf:
        - $ref: '#/components/schemas/host.HostInfoAttr'
    host.HostCreate:
      type: object
      required:
        - authInfo
      properties:
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
      allOf:
        - $ref: '#/components/schemas/host.HostInfoAttr'
    host.HostInfoAttr:
      type: object
      properties:
        addr:
          type: object
          properties:
            ipv4:
              type: array
              items:
                type: string
            ipv6:
              type: array
              items:
                type: string
      allOf:
        - $ref: '#/components/schemas/host.HostInfoObj'
    host.HostInfoObj:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    host.NSHostObj:
      type: object
      required:
        - hostObj
      properties:
        hostObj:
          type: array
          items:
            $ref: '#/components/schemas/host.HostInfoObj'
    message.PollHeaders:
      type: object
    message.PollMessageAckResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    message.PollQueueMessage:
      type: object
      required:
        - id
        - msg
        - trnData
      properties:
        id:
          type: string
        msg:
          type: string
        trnData:
          type: object
  securitySchemes:
    BasicAuth:
      type: http
      scheme: Basic
servers:
  - url: https://localhost:8000
    description: Local RPP Testbed server
    variables: {}
