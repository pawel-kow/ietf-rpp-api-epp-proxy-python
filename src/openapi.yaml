openapi: 3.0.0
info:
  title: RPP Testbed
  version: 1.0.0
  description: RPP Testbed server
tags:
  - name: Domains
  - name: Contacts
  - name: Hosts
  - name: Poll messages
paths:
  /contacts:
    head:
      operationId: contacts_Check
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactReference'
      tags:
        - Contacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactReference'
    post:
      operationId: contacts_Create
      parameters:
        - name: expect
          in: header
          required: false
          schema:
            type: string
            enum:
              - 100-continue
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactReference'
      tags:
        - Contacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactReference'
  /contacts/{id}:
    get:
      operationId: contacts_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactReference'
      tags:
        - Contacts
    patch:
      operationId: contacts_Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactReference'
      tags:
        - Contacts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactReferenceUpdate'
  /domains:
    head:
      operationId: domains_Check
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
    post:
      operationId: domains_Create
      parameters:
        - name: expect
          in: header
          required: false
          schema:
            type: string
            enum:
              - 100-continue
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
  /domains/{id}:
    get:
      operationId: domains_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      tags:
        - Domains
    patch:
      operationId: domains_Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainUpdate'
    delete:
      operationId: domains_Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
      tags:
        - Domains
  /domains/{id}/processes/deletion:
    get:
      operationId: domains_DeletionQuery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDeletion'
      tags:
        - Domains
  /domains/{id}/processes/renewal:
    put:
      operationId: domains_RenewalRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRenewal'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRenewal'
    get:
      operationId: domains_RenewalQuery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRenewal'
      tags:
        - Domains
    delete:
      operationId: domains_RenewalCancel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRenewal'
      tags:
        - Domains
  /domains/{id}/processes/transfer:
    put:
      operationId: domains_TransferRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainTransfer'
      tags:
        - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainTransfer'
    get:
      operationId: domains_TransferQuery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainTransfer'
      tags:
        - Domains
    delete:
      operationId: domains_TransferCancel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainTransfer'
      tags:
        - Domains
  /domains/{id}/processes/transfer/approval:
    put:
      operationId: domains_TransferApprove
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainTransfer'
      tags:
        - Domains
  /domains/{id}/processes/transfer/rejection:
    put:
      operationId: domains_TransferReject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainTransfer'
      tags:
        - Domains
  /hosts:
    head:
      operationId: hosts_Check
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      tags:
        - Hosts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostInfoAttr'
    post:
      operationId: hosts_Create
      parameters:
        - name: expect
          in: header
          required: false
          schema:
            type: string
            enum:
              - 100-continue
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      tags:
        - Hosts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostInfoAttr'
  /hosts/{id}:
    get:
      operationId: hosts_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      tags:
        - Hosts
    patch:
      operationId: hosts_Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
      tags:
        - Hosts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostInfoAttrUpdate'
  /messages:
    get:
      operationId: Messages_PollRequest
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
      tags:
        - Poll messages
  /messages/{id}:
    delete:
      operationId: Messages_AckPoll
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
      tags:
        - Poll messages
components:
  schemas:
    Contact:
      type: object
      required:
        - id
        - name
        - address
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
    ContactReference:
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: string
        type:
          type: array
          items:
            $ref: '#/components/schemas/ContactType'
    ContactReferenceUpdate:
      type: object
      properties:
        value:
          type: string
        type:
          type: array
          items:
            $ref: '#/components/schemas/ContactType'
    ContactType:
      type: string
      enum:
        - registrant
        - admin
        - tech
        - billing
    DnsSec:
      type: object
      required:
        - keyTag
        - algorithm
        - digestType
        - digest
      properties:
        keyTag:
          type: string
        algorithm:
          type: string
        digestType:
          type: string
        digest:
          type: string
    Domain:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        processes:
          type: object
          properties:
            creation:
              $ref: '#/components/schemas/DomainCreation'
            renewal:
              $ref: '#/components/schemas/DomainRenewal'
            transfer:
              $ref: '#/components/schemas/DomainTransfer'
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
        ns:
          $ref: '#/components/schemas/NS'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactReference'
        dnsSEC:
          type: array
          items:
            $ref: '#/components/schemas/DnsSec'
      example:
        name: example.com
        processes:
          creation:
            period: P2Y
        authInfo:
          pw: password
        contacts:
          - value: registrant-id
            type:
              - registrant
    DomainCreation:
      type: object
      properties:
        period:
          type: string
          format: duration
    DomainDeletion:
      type: object
      properties:
        purgeDate:
          type: string
          format: date-time
    DomainRenewal:
      type: object
      properties:
        period:
          type: string
          format: duration
    DomainTransfer:
      type: object
      properties:
        period:
          type: string
          format: duration
    DomainUpdate:
      type: object
      properties:
        name:
          type: string
        processes:
          type: object
          properties:
            creation:
              $ref: '#/components/schemas/DomainCreation'
            renewal:
              $ref: '#/components/schemas/DomainRenewal'
            transfer:
              $ref: '#/components/schemas/DomainTransfer'
        authInfo:
          type: object
          properties:
            pw:
              type: string
            hash:
              type: string
        ns:
          $ref: '#/components/schemas/NSUpdate'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactReference'
        dnsSEC:
          type: array
          items:
            $ref: '#/components/schemas/DnsSec'
      example:
        name: example.com
        processes:
          creation:
            period: P2Y
        authInfo:
          pw: password
        contacts:
          - value: registrant-id
            type:
              - registrant
    HelloResponse:
      type: object
      required:
        - svID
        - svDate
        - svcMenu
        - dcp
      properties:
        svID:
          type: string
        svDate:
          type: string
        svcMenu:
          type: object
          properties:
            version:
              type: string
            lang:
              type: array
              items:
                type: string
          required:
            - version
            - lang
        dcp:
          type: object
          properties:
            access:
              type: object
              properties:
                all:
                  type: string
              required:
                - all
            statement:
              type: object
              properties:
                purpose:
                  type: object
                  properties:
                    admin:
                      type: string
                    prov:
                      type: string
                  required:
                    - admin
                    - prov
                recipient:
                  type: object
                  properties:
                    ours:
                      type: string
                    public:
                      type: string
                  required:
                    - ours
                    - public
                retention:
                  type: object
                  properties:
                    stated:
                      type: string
                  required:
                    - stated
              required:
                - purpose
                - recipient
                - retention
          required:
            - access
            - statement
    Host:
      type: object
      allOf:
        - $ref: '#/components/schemas/HostInfoAttr'
    HostInfoAttr:
      type: object
      properties:
        addr:
          type: object
          properties:
            ipv4:
              type: array
              items:
                type: string
            ipv6:
              type: array
              items:
                type: string
      allOf:
        - $ref: '#/components/schemas/HostInfoObj'
    HostInfoAttrUpdate:
      type: object
      properties:
        addr:
          type: object
          properties:
            ipv4:
              type: array
              items:
                type: string
            ipv6:
              type: array
              items:
                type: string
      allOf:
        - $ref: '#/components/schemas/HostInfoObjUpdate'
    HostInfoObj:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    HostInfoObjUpdate:
      type: object
      properties:
        name:
          type: string
    HostUpdate:
      type: object
      allOf:
        - $ref: '#/components/schemas/HostInfoAttrUpdate'
    Message:
      type: object
    NS:
      oneOf:
        - $ref: '#/components/schemas/NSHostObj'
        - $ref: '#/components/schemas/NSHostAttr'
    NSHostAttr:
      type: object
      required:
        - hostAttr
      properties:
        hostAttr:
          type: array
          items:
            $ref: '#/components/schemas/HostInfoAttr'
    NSHostAttrUpdate:
      type: object
      properties:
        hostAttr:
          type: array
          items:
            $ref: '#/components/schemas/HostInfoAttr'
    NSHostObj:
      type: object
      required:
        - hostObj
      properties:
        hostObj:
          type: array
          items:
            $ref: '#/components/schemas/HostInfoObj'
    NSHostObjUpdate:
      type: object
      properties:
        hostObj:
          type: array
          items:
            $ref: '#/components/schemas/HostInfoObj'
    NSUpdate:
      oneOf:
        - $ref: '#/components/schemas/NSHostObjUpdate'
        - $ref: '#/components/schemas/NSHostAttrUpdate'
    Registrant:
      type: object
      required:
        - id
      properties:
        id:
          type: string
servers:
  - url: https://localhost:8000
    description: Local RPP Testbed server
    variables: {}
